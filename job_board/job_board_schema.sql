CREATE TABLE IF NOT EXISTS job_application_formats (
    format_id SMALLSERIAL PRIMARY KEY,
    format VARCHAR(30) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS work_formats (
    format_id SMALLSERIAL PRIMARY KEY,
    format VARCHAR(30) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS languages (
    language_id SMALLSERIAL PRIMARY KEY,
    language_name VARCHAR(50) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS language_levels (
    level_id SMALLSERIAL PRIMARY KEY,
    level_name VARCHAR(30) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS tages (
    tage_id SERIAL PRIMARY KEY,
    tage TEXT UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS genders (
    gender_id SMALLSERIAL PRIMARY KEY,
    gender_name VARCHAR(15) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS profiles (
    profile_id SERIAL PRIMARY KEY,
    phone VARCHAR(25),
    age SMALLINT CHECK (age > 0),
    gender_id SMALLINT,
    city VARCHAR(50),
    country VARCHAR(50),
    photo TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS statuses (
    status_id SMALLSERIAL PRIMARY KEY,
    status VARCHAR(30) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS salary_ranges (
    range_id SMALLSERIAL PRIMARY KEY,
    range INT4RANGE NOT NULL
);
CREATE TABLE IF NOT EXISTS position_levels (
    position_levels_id SMALLSERIAL PRIMARY KEY,
    position_level VARCHAR(20) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    surname VARCHAR(50),
    login VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(30) UNIQUE NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    experience_description TEXT,
    resume TEXT,
    linkedin TEXT,
    github TEXT,
    experience SMALLINT CHECK (experience >= 0),
    profile_id INTEGER UNIQUE NOT NULL REFERENCES profiles ON UPDATE CASCADE ON DELETE CASCADE,
    status_id SMALLINT DEFAULT 1 REFERENCES statuses ON UPDATE CASCADE ON DELETE SET NULL,
    salary_range_id SMALLINT REFERENCES salary_ranges ON UPDATE CASCADE ON DELETE SET NULL,
    position_level_id SMALLINT REFERENCES position_levels ON UPDATE CASCADE ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS users_languages_levels (
    user_id INTEGER NOT NULL REFERENCES users ON UPDATE CASCADE ON DELETE CASCADE,
    language_id SMALLINT NOT NULL REFERENCES languages ON UPDATE CASCADE ON DELETE CASCADE,
    level_id SMALLINT NOT NULL REFERENCES language_levels ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (user_id, level_id)
);
CREATE TABLE IF NOT EXISTS job_application_formats_users (
    format_id SMALLINT REFERENCES job_application_formats ON UPDATE CASCADE ON DELETE CASCADE,
    user_id INTEGER REFERENCES users ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (user_id, format_id)
);
CREATE TABLE IF NOT EXISTS work_formats_users (
    format_id SMALLINT REFERENCES work_formats ON UPDATE CASCADE ON DELETE CASCADE,
    user_id INTEGER REFERENCES users ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (user_id, format_id)
);
CREATE TABLE IF NOT EXISTS users_tages  (
    user_id INTEGER REFERENCES users ON UPDATE CASCADE ON DELETE CASCADE,
    tage_id INTEGER REFERENCES tages ON UPDATE CASCADE ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS countries (
    country_id SMALLSERIAL PRIMARY KEY,
    country VARCHAR(30) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS reviews (
    review_id SERIAL PRIMARY KEY,
    review VARCHAR(800) NOT NULL,
    user_id INTEGER NOT NULL REFERENCES users ON UPDATE CASCADE ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS likes (
    like_id SMALLSERIAL PRIMARY KEY,
    name VARCHAR(20) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS reviews_likes_users (
    review_id INTEGER NOT NULL REFERENCES reviews ON UPDATE CASCADE ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES users ON UPDATE CASCADE ON DELETE CASCADE,
    like_id SMALLINT NOT NULL REFERENCES likes ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (user_id, review_id)
);
CREATE TABLE IF NOT EXISTS sectors (
    sector_id SERIAL PRIMARY KEY,
    sector VARCHAR(100) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS employees_quantity_range (
    quantity_id SMALLSERIAL PRIMARY KEY,
    quantity INT4RANGE NOT NULL
);
CREATE TABLE IF NOT EXISTS addresses (
    address_id SERIAL PRIMARY KEY,
    city VARCHAR(30),
    country VARCHAR(30),
    street VARCHAR(50),
    house_number INTEGER,
    office_number INTEGER
);
CREATE TABLE IF NOT EXISTS companies (
    company_id SERIAL PRIMARY KEY,
    name VARCHAR(200) UNIQUE NOT NULL,
    quantity_id SMALLINT REFERENCES employees_quantity_range ON UPDATE CASCADE ON DELETE SET NULL,
    foundation_year SMALLINT CHECK (foundation_year > 0),
    logo TEXT,
    description TEXT NOT NULL,
    email VARCHAR(50) NOT NULL,
    phone VARCHAR(25),
    web_site TEXT UNIQUE NOT NULL,
    linkedin TEXT,
    twiter TEXT,
    instagram TEXT,
    address_id INTEGER UNIQUE REFERENCES addresses ON UPDATE CASCADE ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS companies_sectors (
    company_id INTEGER REFERENCES companies ON UPDATE CASCADE ON DELETE CASCADE,
    sector_id INTEGER REFERENCES sectors ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (company_id, sector_id)
);
CREATE TABLE IF NOT EXISTS companies_reviews (
    company_id INTEGER REFERENCES companies ON UPDATE CASCADE ON DELETE CASCADE,
    review_id INTEGER REFERENCES reviews ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (company_id, review_id)
);
CREATE TABLE IF NOT EXISTS positions (
    position_id SERIAL PRIMARY KEY,
    position_name VARCHAR(100) UNIQUE NOT NULL
);
CREATE TABLE IF NOT EXISTS employees (
    employee_id SERIAL PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    surname VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    company_id INTEGER NOT NULL REFERENCES companies ON UPDATE CASCADE ON DELETE CASCADE,
    phone VARCHAR(25),
    password VARCHAR(25) UNIQUE NOT NULL,
    city VARCHAR(30),
    country VARCHAR(30),
    photo TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS positions_employees (
    position_id INTEGER REFERENCES positions ON UPDATE CASCADE ON DELETE CASCADE,
    employee_id INTEGER REFERENCES employees ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (position_id, employee_id)
);
CREATE TABLE IF NOT EXISTS vacancies (
    vacancy_id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    position_level_id SMALLINT REFERENCES position_levels ON UPDATE CASCADE ON DELETE SET NULL,
    salary_range_id SMALLINT REFERENCES salary_ranges ON UPDATE CASCADE ON DELETE SET NULL,
    company_id INTEGER NOT NULL REFERENCES companies ON UPDATE CASCADE ON DELETE CASCADE,
    employee_id INTEGER NOT NULL REFERENCES employees ON UPDATE CASCADE ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS vacancies_countries (
    country_id SMALLINT REFERENCES countries ON UPDATE CASCADE ON DELETE CASCADE,
    vacancy_id INTEGER REFERENCES vacancies ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (country_id, vacancy_id)
);
CREATE TABLE IF NOT EXISTS vacancies_tages (
    vacancy_id INTEGER REFERENCES vacancies ON UPDATE CASCADE ON DELETE CASCADE,
    tage_id INTEGER REFERENCES tages ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (vacancy_id, tage_id)
);
CREATE TABLE IF NOT EXISTS vacancies_work_formats (
    vacancy_id INTEGER REFERENCES vacancies ON UPDATE CASCADE ON DELETE CASCADE,
    format_id SMALLINT REFERENCES work_formats ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (vacancy_id, format_id)
);
CREATE TABLE IF NOT EXISTS vacancies_job_application_formats (
    vacancy_id INTEGER REFERENCES vacancies ON UPDATE CASCADE ON DELETE CASCADE,
    format_id SMALLINT REFERENCES job_application_formats ON UPDATE CASCADE ON DELETE CASCADE,
    PRIMARY KEY (vacancy_id, format_id)
);
CREATE TABLE IF NOT EXISTS responds (
    respond_id BIGSERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users ON UPDATE CASCADE ON DELETE CASCADE,
    vacancy_id INTEGER NOT NULL REFERENCES vacancies ON UPDATE CASCADE ON DELETE CASCADE,
    description VARCHAR(500),
    resume TEXT,
    phone VARCHAR(25),
    status VARCHAR(30),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
